from pathlib import Path
from typing import Union

class HPLConfig:
    """
    Generates and writes an HPL benchmark configuration file.

    Parameters:
        n (int): Problem size N.
        nb (int): Block size.
        p (int): Process grid P.
        q (int): Process grid Q.
        custom_params (Optional[Dict[str, str]]): Additional custom HPL parameters.
        output_dir (str): Default directory for storing files if needed.
    """

    def __init__(
        self,
        n: int,
        nb: int,
        p: int,
        q: int,
        output_dir: str = "/tmp/hpl_configs",
    ):
        self.n = n
        self.nb = nb
        self.p = p
        self.q = q
        self.output_dir = Path(output_dir)

    def write_config(self, file_path: Union[str, Path]) -> Path:
        """
        Write the HPL configuration to the specified file path.

        Args:
            file_path (Union[str, Path]): The path where the configuration file will be written.

        Returns:
            Path: The path to the generated configuration file.
        """
        file_path = Path(file_path)
        file_path.parent.mkdir(parents=True, exist_ok=True)

        config_content = (
            "HPLinpack benchmark input file\n"
            "Generated by HPLConfig\n"
            "HPL.out      output file name (if any)\n"
            "file            device out (6=stdout,7=stderr,file)\n"
            "1            # of problems sizes (N)\n"
            f"{self.n}    Ns\n"
            "1            # of NBs\n"
            f"{self.nb}         NBs\n"
            "0            PMAP process mapping (0=Row-,1=Column-major)\n"
            "1            # of process grids (P x Q)\n"
            f"{self.p}         Ps\n"
            f"{self.q}         Qs\n"
            "16.0         threshold\n"
            "1            # of panel fact\n"
            "2            PFACTs (0=left, 1=Crout, 2=Right)\n"
            "1            # of recursive stopping criterium\n"
            "4            NBMINs (>= 1)\n"
            "1            # of panels in recursion\n"
            "2            NDIVs\n"
            "1            # of recursive panel fact.\n"
            "1            RFACTs (0=left, 1=Crout, 2=Right)\n"
            "1            # of broadcast\n"
            "1            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)\n"
            "1            # of lookahead depth\n"
            "1            DEPTHs (>=0)\n"
            "2            SWAP (0=bin-exch,1=long,2=mix)\n"
            "64           swapping threshold\n"
            "0            L1 in (0=transposed,1=no-transposed) form\n"
            "0            U  in (0=transposed,1=no-transposed) form\n"
            "1            Equilibration (0=no,1=yes)\n"
            "8            memory alignment in double (> 0)\n"
            "##### This line (no. 32) is ignored (it serves as a separator). ######\n"
            "0                               Number of additional problem sizes for PTRANS\n"
            "1200 10000 30000                values of N\n"
            "0                               number of additional blocking sizes for PTRANS\n"
            "40 9 8 13 13 20 16 32 64        values of NB\n"
        )

        with open(file_path, "w") as f:
            f.write(config_content)

        return file_path
